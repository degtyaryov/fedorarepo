README.rpm-dist
-----------------------------------------------------------------------------
Version 1.2.1, for the Postgres-XC 1.2.1 RPM set.

http://postgres-xc.sourceforge.net/

Devrim Gündüz <devrim@gunduz.org>
David Wheeler <david@justatheory.com>
Degtyaryov Dmitriy <degtyaryov@gmail.com>

-----------------------------------------------------------------------------

Contents:
 1.)    Introduction and QuickStart
 2.)    Upgrading an installation
 3.)    Postgres-XC RPM packages and rationale
 4.)    Starting multiple postmasters
 5.)    Regression Testing
 6.)    Starting postmaster automatically on startup
 7.)    Grand Unified Configuration(GUC) File
 8.)    Logging set up
 9.)    Rebuilding from the source RPM
10.)    Contrib files
11.)    Further Information Resource

INTRODUCTION
-----------------------------------------------------------------------------
This document exists to explain the layout of the RPMs for Postgres-XC, to
describe various RPM specifics, and to document special features found
in the RPMset.

This document is written to be applicable to version 1.2.1 of Postgres-XC,
which is the current version of the RPMs as of this writing. More to the
point, versions prior to 1.2.1 are not documented here.

Postgres RPMs carry a "PGDG" after the release number. Other RPMsets as
distributed with Linux distributions may have a different release number
and initials.

If you want to stay up-to-date on the Postgres-XC core itself, you may
want to use PGDG set, instead of the binaries supplied by distribution.

These RPMs do not support any sort of major version upgrading process
other than that documented in the regular documentation.  That is, you
must dump, upgrade, initdb, and restore your data if you are
performing a major version update. This is not needed for minor version
updates.

SERVER QUICKSTART
-----------------------------------------------------------------------------
For a fresh installation of postgresxc121-server, you will need to initialize
the cluster first. Run:

    su -l postgres -c "/usr/pgxc-1.2.1/bin/initdb --nodename node1"

as root, and it will prepare a new data node cluster for you. Then you will
need to start Postgres-XC. Again as root, run:

    systemctl start postgresxc-1.2.1.service

This command will start a data node postmaster that will listen on localhost
and Unix socket 5432 only. Edit /var/lib/pgxc/1.2.1/data/postgresql.conf and
pg_hba.conf if you want to allow remote access -- see the section on Grand
Unified Configuration. Create or edit /etc/sysconfig/pgxc/postgresxc-1.2.1 to
tweak the startup configuration, especially if you need to start a coordinator
component rather than a data node:

   PGCOMPONENT=coordinator

GTM QUICKSTART
-----------------------------------------------------------------------------
If you want to run a GTM, first you'll need to install postgresxc121-gtm, and
then initialize it:

    su -l postgres -c "/usr/pgxc-1.2.1/bin/initgtm -Z gtm"

as root, and it will prepare a new GTM directory for you. Then you will need
to start the GTM. Again as root, run:

    systemctl start postgresgtm-1.2.1.service

This command will start a GTM that will listen on localhost and Unix socket
6666 only. Edit /var/lib/pgxc/1.2.1/gtm/gtm.conf to tweak the configuration.
Create or edit /etc/sysconfig/pgxc/postgresgtm-1.2.1 to tweak the GTM startup
configuration, especially if you need to start a GTM proxy rather than a GTM:

    PGGTM=gtm_proxy

GTM & SERVER CONFIGURATION
-----------------------------------------------------------------------------
The file /var/lib/pgxc/1.2.1/.bash_profile is packaged to help with the
setting of environment variables. You may edit this file, and it won't be
overwritten during an upgrade.  However, enhancements and bugfixes may
be added to this file, so be sure to check .bash_profile.rpmnew after
upgrading.

The user 'postgres' is created during installation of the server subpackage.
This user by default is UID and GID 26. The user has the default shell set to
bash, and the home directory set to /var/lib/pgxc.  This user also has no
default password.  If you want to be able to su to it from a non-root account
or login as 'postgres' you will need to set a password using passwd.

In the default installation, only postgres user is allowed to access to
the database server, because initdb in the RPMs pick up "peer" auth
method in the RPMs.

All the binaries are installed under /usr/pgxc-1.2.1/bin. However, the
tools that are compatible with the previous releases are symlinked under
/usr/bin directory. Please note that RPMs are using alternatives method
in here, so whenever a newer major version is installed, symlinks will
point to the new version. Here is the current list of the binaries that
are under $PATH:

- clusterdb
- createdb
- createlang
- createuser
- dropdb
- droplang
- dropuser
- pg_dump
- pg_dumpall
- pg_restore
- psql
- reindexdb

You may want to add /usr/pgxc-1.2.1/bin to your $PATH variable in
/etc/profile, if you want to use them easily. However, please note that
this may lead to some unintentional side effects, so be careful.


UPGRADING AN INSTALLATION
-----------------------------------------------------------------------------
For a minor-version upgrade (such as 1.1.1 to 1.1.2), just install the
new RPMs; there's usually nothing more to it than that.  Upgrading
across a major release of Postgres-XC (for example, from 1.1.x to 1.2.x)
requires more effort.

The RPMs also support in-place upgrade from th immediately previous major
release. Currently, you can upgrade in-place from 1.1.x. Just run:

    su -l postgres -c "/usr/pgxc-%{new-version}/bin/initdb --nodename node1"
    su -l postgres -c "/usr/pgxc-%{new-version}/bin/pg_upgrade -b /usr/pgxc-1.2.1/bin/ -B /usr/pgxc-%{new-version}/ -d /var/lib/pgxc/1.2.1/ -D /var/lib/pgxc/%{new-version}/ -p 5432 -P 5433 -c"
    systemctl stop postgresxc-1.2.1.service
    su -l postgres -c "/usr/pgxc-%{new-version}/bin/pg_upgrade -b /usr/pgxc-1.2.1/bin/ -B /usr/pgxc-%{new-version}/ -d /var/lib/pgxc/1.2.1/ -D /var/lib/pgxc/%{new-version}/ -p 5432 -P 5433 > ~/pg_upgrade.log"


Please note that 1.1 and 1.2 contrib RPMs needs to be installed for this
feature to work.

POSTGRESXC RPM PACKAGES AND RATIONALE.
-----------------------------------------------------------------------------
Postgres-XC is split up into multiple packages so that users can 'pick and
choose' what pieces are needed, and what dependencies are required.

The RPMset is packaged in the following subpackages:

postgresxc121:           Key clients and libraries, and documentation
postgresxc121-server:    Server executables and data files
postgresxc121-gtm:       GTM executables and configuration files
postgresxc121-devel:     Development libraries and include files
postgresxc121-test:      The regression tests and associated files
postgresxc121-libs:      Client shared libraries
postgresxc121-docs:      Extra documentation, such as the tutorial files
postgresxc121-contrib:   The contrib source tree, as well as selected binaries
postgresxc121-plperl:    PL/Perl procedural language
postgresxc121-plpython:  PL/Python procedural language
postgresxc121-pltcl:     PL/Tcl procedural language

You have to install postgresxc and postgresxc121-libs to do anything.
postgresxc121-server is needed unless you only plan to use the clients to work
with a remote Postgres-XC server. The others are optional.

RPM FILE LOCATIONS.
-----------------------------------------------------------------------------
To be in compliance with the Linux FHS, the Postgres-XC RPMs install files in
a manner not consistent with most of the Postgres-XC documentation.  According
to the standard Postgres-XC documentation, Postgres-XC is installed under the
directory /usr/local/pgxc, with executables, source, and data existing in
various subdirectories.

Different distributions have different ideas of some of these file locations.
In particular, the documentation directory can be /usr/doc, /usr/doc/packages,
/usr/share/doc, /usr/share/doc/packages, or some other similar path.

However, the Red Hat / Scientific Linux ( CentOS / Fedora RPM's install
the files like this:

Executables:            /usr/bin and /usr/pgxc-1.2.1/bin
Libraries:              /usr/pgxc-1.2.1/lib
Documentation:          /usr/pgxc-1.2.1/doc
Contrib documentation:  /usr/pgxc-1.2.1/doc
Source:                 not installed
Data:                   /var/lib/pgxc/1.2.1/data
Backup area:            /var/lib/pgxc/1.2.1/backups
Templates:              /usr/pgxc-1.2.1/share
Procedural Languages:   /usr/pgxc-1.2.1/lib
Development Headers:    /usr/pgxc-1.2.1/include
Other shared data:      /usr/pgxc-1.2.1/share
Regression tests:       /usr/pgxc-1.2.1/lib/test

While it may seem gratuitous to place these files in different locations, the
FHS requires it -- distributions should not ever touch /usr/local.  It may
also seem like more work to keep track of where everything is -- but, that's
the beauty of RPM -- you don't have to keep track of the files, RPM does it
for you.

These RPMs are designed to be LSB-compliant -- if you find this not to be the
case, please let us know by way of the pgsql-yum@postgresql.org
mailing list.

-------------------------------------------------------------------------------
MULTIPLE POSTMASTERS (For the same Postgres-XC version)
-------------------------------------------------------------------------------
The postgresxc-server RPM contains an 'initscript' that is used to start the
postmaster.  The current version of this script has logic to be able to start
multiple postmasters, with different data areas, listening on different ports,
etc.  To use this functionality requires root access.

As an example, let us create a coordinator cluster called, creatively enough,
'coordinator'. Here are the steps:

1.)     Create a file in /etc/systemd/system/ named 'coordinator-1.2.1.service'
        (or any other name not already used in /etc/systemd/system/):

            cat << EOF > /etc/systemd/system/coordinator-1.2.1.service
            .include /usr/lib/systemd/system/postgresxc-1.2.1.service
            [Service]
            Environment=PGDATA=/path/to/coordinator/data
            Environment=PGPORT=5432
            Environment=PGNODETYPE=coordinator
            EOF

2.)     create the target PGDATA.

3.)     Initdb the targe PGDATA as documented in the main documentation.
        Automatic initdb may or may not work for you, so a manual one is
        preferred.  This must be done as user 'postgres'

4.)     Edit postgresql.conf to change the port, address, tcpip settings, etc.

5.)     Start the postmaster with 'systemctl start coordinator-1.2.1.service'.

Note that there may be problems with the standard symlink -- consider this
support experimental at this point in time.

When doing a major-version upgrade of the coordinator, mention the service
name in the postgresxc-setup command, for example 'postgresxc-setup upgrade
coordinator'. This will let postgresxc-setup find the correct data directory
from the service file.

REGRESSION TESTING
-------------------------------------------------------------------------------
If you install the postgresxc-test RPM then you can run the Postgres-XC
regression tests.  These tests stress your database installation and produce
results that give you assurances that the installation is complete, and that
your database machine is up to the task.

To run the regression tests under the RPM installation, make sure that the
postmaster has been started (if not, su to root and do "systemctl start 
postgresxc-1.2.1"), cd to /usr/pgxc-1.2.1/lib/test/regress, su to postgres, 
and execute "make check". This command will start the regression tests and 
will both show the results to the screen and store the results in the file 
regress.out.

If any tests fail, see the file regression.diffs in that directory for details,
and read the "Regression Tests" section of the Postgres-XC documentation to
find out whether the differences are actually significant.  If you need help
interpreting the results, contact the pgxc-general list at
postgresxc.org.

After testing, say "make clean" to remove the files generated by the test
script.

STARTING POSTMASTER AUTOMATICALLY AT SYSTEM STARTUP
-------------------------------------------------------------------------------

Fedora / Red Hat / CentOS use the systemctl to manage server startup.
A systemd service file for Postgres-XC is provided in the server package, as
/usr/lib/systemd/system/postgresxc-1.2.1.service. To start the postmaster 
manually, as root run

    systemctl start postgresxc-1.2.1

To shut the postmaster down,

    systemctl stop postgresxc-1.2.1.service

These two commands only change the postmaster's current status.  If you
want the postmaster to be started automatically during future system startups,
run
    systemctl enable postgresxc-1.2.1.service

To undo that again,

    systemctl disable postgresxc-1.2.1.service

See "man systemctl" for other possible subcommands.

GRAND UNIFIED CONFIGURATION (GUC) FILE
-------------------------------------------------------------------------------
The Postgres-XC server has many tunable parameters -- the file
/var/lib/pgxc/1.2.1/data/postgresql.conf is the master configuration file for the
whole system.

The RPM ships with a mostly-default file -- you will need to tune the
parameters for your installation.  In particular, you might want to allow
nonlocal TCP/IP socket connections -- in order to allow these, you will need
to edit the postgresql.conf file.  The line in question contains the string
'listen_addresses' -- you need to both uncomment the line and set the value
to '*' to get the postmaster to accept nonlocal connections.  You'll also need
to adjust pg_hba.conf appropriately.

LOGGING SET UP
-------------------------------------------------------------------------------
By default, the postmaster's stderr log is directed into files placed in a
pg_log subdirectory of the data directory (ie, /var/lib/pgxc/1.2.1/data/pg_log).
The out-of-the-box configuration rotates among seven files, one for each
day of the week.  You can adjust this by changing postgresql.conf settings.

REBUILDING FROM SOURCE RPM
-------------------------------------------------------------------------------
If your distribution is not supported by the binary RPMs from PostgreSQL.org,
you will need to rebuild from the source RPM.  Download the .src.rpm for this
release.  You will need to be root to rebuild, unless you have set up
a non-root build environment (which is the recommended method anyway).

Install the source RPM with rpm -i, then cd to the rpm building area
(which is /usr/src/redhat by default).  You will have to have a full
development environment to rebuild the full RPM set.

This release of the RPMset includes the ability to conditionally build
sets of packages.  The parameters, their defaults, and the meanings are:

beta        0   #build with cassert and do not strip the binaries
python      1   #build the postgresxc-python package.
tcl         1   #build the postgresxc-tcl package.
test        1   #build the postgresxc-test package.
plpython    1   #build the PL/Python procedural language package.
pltcl       1   #build the PL/Tcl procedural language package.
plperl      1   #build the PL/Perl procedural language package.
ssl         1   #use OpenSSL support.
kerberos    1   #use Kerberos 5 support.
nls         1   #build with national language support.
ldap        1   #build with LDAP support.
pam         1   #build with PAM support.
runselftest 1   #do "make check" during the build.
sdt         1   #build with SystemTap support.
xml         1   #build with XML support
pgfts       1   #build with --enable-thread-safety
uuid        1   #build contrib/uuid-ossp

To use these defines, invoke a rebuild like this:

    rpmbuild --rebuild --define 'python 0' --define 'tcl 0' \
    --define 'test 0' --define 'runselftest 0' --define 'kerberos 0' \
    postgresxc121-1.2.1-1PGDG.f17.src.rpm

This line would disable the python, tcl, and test subpackages, disable
the regression test run during build, and disable kerberos support.

You might need to disable runselftest if there is an installed version of
Postgres-XC that is a different major version from what you are trying to
build.  The self test tends to pick up the installed libpq.so shared library
in place of the one being built :-(, so if that isn't compatible the test will
fail. Also, you can't use runselftest when doing the build as root.

More of these conditionals will be added in the future.

CONTRIB FILES
-------------------------------------------------------------------------------
The contents of the contrib tree are packaged into the -contrib subpackage
and are processed with make and make install. Most of the modules are in
/usr/pgxc-1.2.1/lib for loadable modules, and binaries are in
/usr/pgxc-1.2.1/bin.  In the future these files may be split out,
depending upon function and dependencies.


MORE INFORMATION
-------------------------------------------------------------------------------
You can get more information at http://postgres-xc.sourceforge.net/,
http://www.postgresql.org, and http://yum.postgresql.org

Please help make this packaging better -- let us know if you find problems, or
better ways of doing things. You can reach us by e-mail at
pgsql-pkg-yum@postgresql.org
-------------------------------------------------------------------------------
